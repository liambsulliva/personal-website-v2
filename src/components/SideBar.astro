---
import { Trans } from "astro-i18next/components";

// Define the structure of a navigation item
interface NavItem {
  i18nKey: string;
  href: string;
}

// Update Props interface
interface Props {
  navItems: NavItem[];
  id?: string;
  className?: string;
}

const { navItems, id = "fade-nav", className = "" }: Props = Astro.props;
---

<div id={id} class={`sidebar ${className}`}>
  <ul>
    <Trans i18nKey={"misc.contents"}><p>CONTENTS</p></Trans>
    {
      navItems.map((item) => (
        <li>
          <Trans i18nKey={item.i18nKey}>
            <a href={item.href}>{/* Translated text will replace this */}</a>
          </Trans>
        </li>
      ))
    }
  </ul>
</div>

<style>
  html {
    scroll-behavior: smooth;
  }
  @media (prefers-reduced-motion: reduce) {
    html {
      scroll-behavior: auto;
    }
  }
  div {
    display: flex;
    flex-direction: row;
    justify-content: end;
    width: 1350px;
    position: fixed;
    opacity: 0.5;
    transform: translateY(0);
    transition:
      opacity 0.25s ease-in-out,
      transform 0.25s cubic-bezier(0, 0.5, 0.5, 1);
  }
  .visible {
    opacity: 1;
  }
  ul {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  p {
    font-size: 14px;
    font-weight: 700;
    text-decoration-line: none;
    color: var(--subheader-color);
  }
  a {
    font-size: 12px;
    font-weight: 700;
    text-decoration-line: none;
    color: var(--sidebar-color);
    transition: color 0.3s ease;
  }
  a:hover,
  a.active {
    color: #fff;
  }
  @media screen and (max-width: 1400px) {
    ul {
      display: none;
    }
  }
  .sidebar {
    z-index: -1;
    opacity: 0.5;
    transition:
      opacity 0.25s ease-in-out,
      transform 0.25s cubic-bezier(0, 0.5, 0.5, 1);
  }
  .sidebar.visible {
    opacity: 1;
  }
</style>

<script>
  interface NavLink {
    linkElement: HTMLAnchorElement;
    targetElement: HTMLElement | null;
  }

  function handleScroll() {
    const nav = document.getElementById("fade-nav");
    if (!nav) return;

    const scrollPosition = window.scrollY;
    const windowHeight = window.innerHeight;
    const documentHeight = document.documentElement.scrollHeight;
    const fadeInStart = windowHeight * 0.05;

    if (scrollPosition > fadeInStart) {
      nav.classList.add("visible");
      nav.classList.remove("hidden");
      const translatePercentage = Math.min(
        ((scrollPosition - fadeInStart) / windowHeight) * 100,
        20
      );
      nav.style.transform = `translateY(-${translatePercentage}%)`;
    } else {
      nav.classList.remove("visible");
      nav.classList.add("hidden");
      nav.style.transform = "translateY(0)";
    }

    if (!(window as any).navLinks) return;

    const navLinks: NavLink[] = (window as any).navLinks;

    let activeSet = false;

    // Check if we're at the bottom of the page
    const isAtBottom =
      window.innerHeight + window.scrollY >= documentHeight - 100; // Threshold, adjust as needed

    if (isAtBottom) {
      // If at the bottom, highlight the last link
      navLinks.forEach((link) => link.linkElement.classList.remove("active"));
      if (navLinks.length > 0) {
        navLinks[navLinks.length - 1].linkElement.classList.add("active");
      }
      activeSet = true;
    }

    if (!activeSet) {
      // Otherwise, find the first section that is in the viewport
      for (const navLink of navLinks) {
        const target = navLink.targetElement;
        if (target) {
          const rect = target.getBoundingClientRect();
          if (rect.top <= windowHeight / 2 && rect.bottom >= windowHeight / 2) {
            navLinks.forEach((link) =>
              link.linkElement.classList.remove("active")
            );
            navLink.linkElement.classList.add("active");
            break;
          }
        }
      }
    }
  }

  // Initialize NavLink list
  function initNavLinks() {
    const nav = document.getElementById("fade-nav");
    if (!nav) return;

    const linkElements =
      nav.querySelectorAll<HTMLAnchorElement>("a[href^='#']");
    const navLinks: NavLink[] = [];

    linkElements.forEach((link) => {
      const href = link.getAttribute("href");
      if (href && href.startsWith("#")) {
        const targetId = href.slice(1);
        const targetElement = document.getElementById(targetId);
        navLinks.push({ linkElement: link, targetElement });
      }
    });

    (window as any).navLinks = navLinks;
  }

  // Mount event listener
  window.addEventListener("scroll", handleScroll);
  window.addEventListener("DOMContentLoaded", initNavLinks);

  // Run on initial page load
  initNavLinks();
  handleScroll();
</script>
