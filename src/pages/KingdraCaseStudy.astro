---
// @ts-ignore
import { localizePath } from "astro-i18next";
import Layout from "../layouts/Layout.astro";
import Footer from "../layouts/Footer.astro";
import Button from "../components/Button.astro";
import SideBar from "../components/SideBar.astro";
import ProjectDescription from "../components/ProjectDescription.astro";
import Mockup from "../images/mockup.png";
import { Image } from "astro:assets";

const sidebarItems = [
  { i18nKey: "caseStudy.overview", href: "#overview" },
  { i18nKey: "caseStudy.highlights", href: "#highlights" },
  { i18nKey: "caseStudy.context", href: "#context" },
  { i18nKey: "caseStudy.problem", href: "#problem" },
  { i18nKey: "caseStudy.updateFlow", href: "#updateFlow" },
  { i18nKey: "caseStudy.layout", href: "#layout" },
  { i18nKey: "caseStudy.interactions", href: "#interactions" },
  { i18nKey: "caseStudy.visualDesign", href: "#visualDesign" },
  { i18nKey: "caseStudy.finalDesigns", href: "#finalDesigns" },
  { i18nKey: "caseStudy.retrospective", href: "#retrospective" },
];
---

<Layout title="Kingdra Pokemon Teambuilder Case Study">
  <div class="btn-container">
    <Button label={"Back"} href={localizePath("/")} />
  </div>
  <main>
    <SideBar navItems={sidebarItems} className="fixed right-12 top-56 -z-10" />
    <div class="content">
      <h1 class="mt-4 text-center text-5xl font-bold text-white">
        Kingdra Pokemon Teambuilder
      </h1>

      <h2 class="text-center text-[1rem] text-[#d0d0d0]">
        A Comprehensive Tool for Building and Managing Pokemon Teams, June 2024
      </h2>

      <Image src={Mockup} alt="Kingdra Teambuilder" />

      <div class="flex justify-center">
        <ProjectDescription
          projectRole={["Software Engineering", "Product Design"]}
          team={["Solo"]}
          tools={["Next.js", "TypeScript", "Tailwind", "Clerk", "MongoDB"]}
          timeline={["Ongoing"]}
        />
      </div>

      <!-- Scaffolded Sections Start Here -->

      <section
        class="flex flex-col justify-between md:flex-row md:gap-24"
        id="overview"
      >
        <h3 class="text-2xl font-semibold text-white">Context</h3>
        <div class="">
          <p>
            My friends and I back home in Virginia host a biannual Pokémon Draft
            League. Like it sounds, it's a fantasy league, but for Pokémon
            instead of football or some other traditional sport.
          </p>
          <br />
          <p>
            In the spring of 2024, I was looking for a project to help me learn
            Next.js, so I decided to create a little application that tracks the
            point values that you have and automatically subtracts those points
            based on which Pokémon you draft. It worked well enough, and it
            eased the cognitive load of trying to track point values AND
            construct hypothetical teams while your opponents are picking in
            real-time.
          </p>
          <br />
          <p>
            After building this, I started to notice that the Pokémon
            Teambuilders that exist on the market today are pretty lackluster.
            So, I decided to take the opportunity to transform the project into
            a full-fledged Pokémon Teambuilder. That's how I landed on <strong
              >Kingdra</strong
            >.
          </p>
        </div>
      </section>

      <section id="highlights">
        <h3 class="text-2xl font-semibold text-white">Considerations</h3>
        <p>So, what are current teambuilders on the market missing?</p>
        <br />
        <div class="card-container">
          <div class="card">
            <svg
              class="mx-auto my-4"
              xmlns="http://www.w3.org/2000/svg"
              width="6rem"
              height="6rem"
              viewBox="0 0 24 24"
              ><path
                fill="white"
                d="m19.05 21.6l-2.925-2.9l-2.2 2.2l-.7-.7q-.575-.575-.575-1.425t.575-1.425l4.225-4.225q.575-.575 1.425-.575t1.425.575l.7.7l-2.2 2.2l2.9 2.925q.3.3.3.7t-.3.7l-1.25 1.25q-.3.3-.7.3t-.7-.3M22 5.9L10.65 17.25l.125.1q.575.575.575 1.425t-.575 1.425l-.7.7l-2.2-2.2l-2.925 2.9q-.3.3-.7.3t-.7-.3L2.3 20.35q-.3-.3-.3-.7t.3-.7l2.9-2.925l-2.2-2.2l.7-.7q.575-.575 1.425-.575t1.425.575l.1.125L18 1.9h4zM6.95 10.85L2 5.9v-4h4l4.95 4.95z"
              ></path></svg
            >
            <h4 class="text-xl font-medium text-white">
              Casual/Competitive Modes
            </h4>
            <p>
              Many existing tools do not cater to both casual and competitive
              players. Kingdra aims to address these gaps by providing a robust
              platform that not only enhances the user experience, but meets the
              needs of all Pokémon players.
            </p>
          </div>
          <div class="card">
            <svg
              class="mx-auto my-4"
              xmlns="http://www.w3.org/2000/svg"
              width="6rem"
              height="6rem"
              viewBox="0 0 24 24"
              ><path
                fill="white"
                d="M6.5 20q-2.275 0-3.887-1.575T1 14.575q0-1.95 1.175-3.475T5.25 9.15q.625-2.3 2.5-3.725T12 4q2.925 0 4.963 2.038T19 11q1.725.2 2.863 1.488T23 15.5q0 1.875-1.312 3.188T18.5 20z"
              ></path></svg
            >
            <h4 class="text-xl font-medium text-white">Cloud Sync</h4>
            <p>
              Pokémon Showdown is infamous for lacking cloud storage. Users
              traditionally needed to export their Pokémon as a text file to
              re-import on other computers, as the data for teams is cached in
              <code>localStorage</code>. I believe this is a half baked
              solution, and Pokémon fans deserve better.
            </p>
          </div>
          <div class="card">
            <svg
              class="mx-auto my-4"
              xmlns="http://www.w3.org/2000/svg"
              width="6rem"
              height="6rem"
              viewBox="0 0 1024 1024"
              ><path
                fill="white"
                d="M834.1 469.2A347.5 347.5 0 0 0 751.2 354l-29.1-26.7a8.09 8.09 0 0 0-13 3.3l-13 37.3c-8.1 23.4-23 47.3-44.1 70.8c-1.4 1.5-3 1.9-4.1 2s-2.8-.1-4.3-1.5c-1.4-1.2-2.1-3-2-4.8c3.7-60.2-14.3-128.1-53.7-202C555.3 171 510 123.1 453.4 89.7l-41.3-24.3c-5.4-3.2-12.3 1-12 7.3l2.2 48c1.5 32.8-2.3 61.8-11.3 85.9c-11 29.5-26.8 56.9-47 81.5a295.6 295.6 0 0 1-47.5 46.1a352.6 352.6 0 0 0-100.3 121.5A347.75 347.75 0 0 0 160 610c0 47.2 9.3 92.9 27.7 136a349.4 349.4 0 0 0 75.5 110.9c32.4 32 70 57.2 111.9 74.7C418.5 949.8 464.5 959 512 959s93.5-9.2 136.9-27.3A348.6 348.6 0 0 0 760.8 857c32.4-32 57.8-69.4 75.5-110.9a344.2 344.2 0 0 0 27.7-136c0-48.8-10-96.2-29.9-140.9"
              ></path></svg
            >
            <h4 class="text-xl font-medium text-white">
              Offensive Type Coverage
            </h4>
            <p>
              Modern Pokémon teambuilders often include insights into what types
              a team is weakest to, but none analyze each Pokémon's attacking
              moves to determine which types the team can't cover. Kingdra
              addresses this in its <code>TypeCoverage</code> component (desktop
              exclusive).
            </p>
          </div>
        </div>
      </section>

      <section id="problem">
        <h3 class="text-2xl font-semibold text-white">Research & Planning</h3>
        <p>Lorem ipsum dolor sit amet...</p>
      </section>

      <section id="layout">
        <h3 class="text-2xl font-semibold text-white">Layout</h3>
        <p>The layout was designed to follow an S-curve.</p>
      </section>

      <section id="interactions">
        <h3 class="text-2xl font-semibold text-white">The Problem</h3>
        <p>How do I make this work for mobile??</p>
      </section>

      <section id="visualDesign">
        <h3 class="text-2xl font-semibold text-white">Visual Design</h3>
        <div class="card-container">
          <div class="card">
            <h4 class="text-xl font-medium text-white">
              General UI - Color Palette
            </h4>
            <p>
              I used a fairly boring color palette for the UI elements. White,
              black, shades of gray, and a deep blue for accents. I kept it
              simple to keep the interface from feeling too cluttered. The
              pokemon sprites are already quite colorful, and the blue accents
              fall in line with the blue of the Kingdra logo.
            </p>
          </div>
          <div class="card">
            <!-- typeBadges.map(() => {}) -->
            <h4 class="text-xl font-medium text-white">
              Type Badges - Color Palette
            </h4>
            <p>
              I used a fairly boring color palette for the UI elements. White,
              black, shades of gray, and a deep blue for accents. I kept it
              simple to keep the interface from feeling too cluttered. The
              pokemon sprites are already quite colorful, and the blue accents
              fall in line with the blue of the Kingdra logo.
            </p>
          </div>
          <div class="card">
            <h4 class="text-xl font-medium text-white">
              Font Choice - Typography
            </h4>
            <p>
              For this project, I settled on Figtree for my font. I needed a
              single sans-serif that could feel playful while also being usable
              across the entire application.
            </p>
          </div>
          <div class="card">
            <h4 class="text-xl font-medium text-white">
              Font Size - Typography
            </h4>
            <p>Fonts were</p>
          </div>
          <div class="card">
            <h4 class="text-xl font-medium text-white">Imagery and Icons</h4>
            <p>
              Incorporated high-quality sprites and custom icons to represent
              Pokemon, abilities, and moves. This visual representation aids
              users in quickly identifying and selecting team components.
            </p>
          </div>
        </div>
      </section>

      <section id="finalDesigns">
        <h3 class="text-2xl font-semibold text-white">Final Designs</h3>
        <div class="row-card-container">
          <div class="row-card">
            <h4 class="text-xl font-medium text-white">Desktop Version</h4>
            <p>
              The desktop version showcases the full feature set of the
              teambuilder, including detailed type coverage, ability selection,
              and move optimization tools. The layout leverages ample screen
              space for a comprehensive overview.
            </p>
            <pre>
{`
const PokeFinder = ({
  gameMode,
  setPokemonParty,
  setEnableToast,
  selectedTeam,
}: PokeFinderProps) => {
  // Component logic for fetching and displaying Pokemon
  return (
    <div className='poke-finder'>
      {/* Search and filter functionalities */}
      {/* Display of Pokemon cards */}
    </div>
  );
};
export default PokeFinder;
`}</pre>
          </div>
          <div class="row-card">
            <h4 class="text-xl font-medium text-white">Mobile Adaptation</h4>
            <p>
              Optimized the layout for mobile devices by implementing responsive
              design principles. Ensured that essential features remain
              accessible and the interface remains intuitive on smaller screens.
            </p>
            <pre>
{`
const PokeParty = ({
  pokemonParty,
  teamNames,
  setTeamNames,
  setPokemonParty,
  setSelectedPokemon,
  setEnableToast,
  selectedTeam,
  setNumTeams,
}: PokePartyProps) => {
  return (
    <div className='poke-party'>
      {/* Display of Pokemon slots */}
      {/* Team management functionalities */}
    </div>
  );
};
export default PokeParty;
`}</pre>
          </div>
          <div class="row-card">
            <h4 class="text-xl font-medium text-white">Embedded Version</h4>
            <p>
              Tuned the final design for embedding within other platforms or
              websites. Ensured that performance remains optimal and the
              interface integrates seamlessly with varying host environments.
            </p>
            <pre>
{`
const handler = async (req: NextApiRequest, res: NextApiResponse) => {
  // API logic for fetching and serving Pokemon data
  res.status(200).json({ pokemonData: filteredPokemonData });
};
export default handler;
`}</pre>
          </div>
        </div>
      </section>

      <section id="retrospective">
        <h3 class="text-2xl font-semibold text-white">Retrospective</h3>
        <p>
          The Kingdra Pokemon Teambuilder project successfully delivered a
          feature-rich application that meets the needs of both casual and
          competitive players. Reflecting on the development process, several
          key learnings emerged:
        </p>
        <ul>
          <li>
            <strong>Technology Selection:</strong> Choosing the right combination
            of frameworks and libraries, such as React and Astro, facilitated a seamless
            development experience and a performant end product.
          </li>
          <li>
            <strong>API Integration:</strong> Efficiently integrating multiple APIs
            required robust error handling and data normalization to ensure consistency
            across the application.
          </li>
          <li>
            <strong>User Experience:</strong> Prioritizing responsive design and
            intuitive interactions significantly enhanced user satisfaction and engagement.
          </li>
          <li>
            <strong>State Management:</strong> Implementing effective state management
            strategies using React Hooks and Context API ensured scalability and
            maintainability as the project grew.
          </li>
          <li>
            <strong>Iterative Development:</strong> Adopting an iterative approach
            allowed for continuous testing and refinement, leading to a polished
            final product.
          </li>
        </ul>
        <br />
        <p>Future Improvements could include:</p>
        <ul>
          <li>
            Enhancing the move and ability recommendation algorithms with
            machine learning techniques.
          </li>
          <li>
            Expanding the application's compatibility with additional Pokemon
            game formats and rulesets.
          </li>
          <li>
            Incorporating user feedback mechanisms to continuously adapt and
            improve features.
          </li>
        </ul>
      </section>
    </div>
  </main>
  <Footer />
</Layout>

<style>
  main {
    margin: auto;
    display: flex;
    flex-direction: row;
    width: 1150px;
    max-width: calc(100% - 2rem);
  }

  .content {
    margin-bottom: 5rem;
  }

  h3,
  h4,
  h5,
  h6,
  p {
    margin: 0;
    text-align: left;
  }

  h3 {
    margin-bottom: 1rem;
  }

  li {
    color: #d0d0d0;
    list-style-type: disc;
    margin-left: 1.25rem;
    padding: 0.25rem;
  }

  iframe {
    width: 100%;
    height: 100%;
    border: none;
  }

  .btn-container {
    margin: 2rem;
  }

  section {
    padding: 4rem 2rem;
    margin: 0 2rem;
    border-bottom: 1px solid #353535;
  }

  @media (max-width: 768px) {
    section {
      margin: 0;
    }
  }

  h2 {
    margin-bottom: 1rem;
  }

  p {
    line-height: 1.6;
  }

  @media (max-width: 1000px) {
    main {
      flex-direction: column;
      width: 100%;
    }

    .sidebar {
      display: none;
    }
  }

  .card-container {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    justify-content: space-between;
  }

  .card {
    background-color: var(--card-color);
    border: 1px solid #333;
    border-radius: 0.75rem;
    padding: 1rem;
    width: calc(33.33% - 0.67rem);
    margin-bottom: 1rem;
  }

  .card h4 {
    margin-bottom: 0.5rem;
  }

  @media (max-width: 768px) {
    .card {
      width: 100%;
    }
  }

  .row-card-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .row-card {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    background-color: var(--card-color);
    border: 1px solid #333;
    border-radius: 0.75rem;
    padding: 1rem;
    width: 100%;
    margin-bottom: 1rem;
  }

  code {
    background-color: #2d2d2d;
    color: #f8f8f2;
    padding: 0.2rem 0.4rem;
    border-radius: 4px;
    font-family: "Courier New", Courier, monospace;
  }

  pre {
    background-color: #1e1e1e;
    color: #d4d4d4;
    padding: 1rem;
    border-radius: 8px;
    overflow: auto;
    text-align: left;
    white-space: pre-wrap;
    word-break: break-word;
  }
</style>
